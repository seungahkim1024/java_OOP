2018-12-17
출처 : https://ko.wikipedia.org/wiki/%EA%B0%9D%EC%B2%B4_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99)
객체는 속성과 기능의 집합이다.

컴퓨터과학에서
객체 또는 오브젝트(object)는
1. 저장공간에서 할당되어 값을 가진다.
2. 식별자에 의해 참조(=주소)되는 공간 (참조값을 가지고 있어야 객체)
(요소는 인덱스에 의해 찾게됨으로 객체가 아님)

변수, 자료 구조(ex.배열), 함수 또는 메소드는 객체가 될 수 있다

=> 변수를 이용해 (클래스)객체에 접근 => 리얼월드 객체 = (디스크에있는 객체)에 접근
-> 클래스객체 on 디스크 -> 클래스
-> 가상객체 on 메모리 -> 인스턴스

메모리가 할당되기 전까지 객체는 존재하지 않는다.

객체는 클래스의 인스턴스이다.

클래스 객체는 자료와 그 자료를 다루는 명령의 조합을 포함하여
객체가 메시지를 받고 자료를 처리하며 메시지를 다른 객체로 보낼 수 있도록 한다. 

=> 실세계의 유추로 설명하자면, 
만약 어떤 사람이 집에서 살기를 원할 때, 
그 집의 청사진(집의 사진)이나 축소 모형 따위는 전혀 필요가 없다. 
필요한 것은 설계에 맞는 실제 집이다. 
이 유추에서 청사진은 인스턴스객체를 나타내고 실제 집은 클래스객체를 나타낸다.

*가상객체는 메모리에서 순간 존재하고. 리얼객체는 디스크에서 변하지않고 존재.
(가상객체 ex.아바타&네이버의 아이디, 리얼객체 = ex.나)

Classes = fields + methods(area) + constructors

real-world objects

디스크는 하드웨어, 소프트웨어는 인스턴스..?

클래스변수(리얼월드객체), 인스턴스변수(가상객체)

객체지향프로그래밍 : 상속. 은닉화. 추상화. 다형성

메소드의 선언구조
public String test(String a){
접근제한 +리턴타입 + ID+(파라미터) + {에어리어}
	a
} ->파라미터

m.test(a); -> 아규먼트

// 리턴타입
결과 없으면 void
결과 있으면 String, int, ..., Member
리턴이 없는 경우와 있는 경우 판단은 개발자가.

OOP의 절차(프로세서)
	1. 어떤 객체( class, instance )를 만들지 결정한다.
	2. 클래스객체가 속성(멤버변수)과 기능(멤버메소드)을 결정한다.

         /**   Main
            [속성] 없음
            [기능] main( )
            Member
            [속성]명사:: name,ssn,id,pass
            [기능]동사:: 회원정보 보여주기 info( );
            Account
            [속성] String accountNum, today; int money;
            [기능] generatorAccountNum( ) //계좌번호생성
                       today( ) // 오늘날짜생성
                       info( ) // 계좌정보 보여주기
        */
        3, 객체들 사이에서 메시지를 주고 받게 한다. (클래스와 인스턴스사이에서 생산자를 이용해 메시지를 주고 받음)
        
은닉화 getter, setter
상속화 extends(확장)
추상화 implements(구현)